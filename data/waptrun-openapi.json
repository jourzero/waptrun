{
  "openapi": "3.0.0",
  "info": {
    "title": "WAPT Runner",
    "description": "Web App PenTesting Runner",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Dev server"
    },
    {
      "url": "https://waptrun.azurewebsites.net",
      "description": "Staging server"
    }
  ],
  "components": {
    "schemas": {
      "account": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "example": "Anonymous"
          },
          "family_name": {
            "type": "string",
            "example": "Smith"
          },
          "given_name": {
            "type": "string",
            "example": "John"
          },
          "id": {
            "type": "string",
            "example": "anon"
          },
          "language": {
            "type": "string",
            "example": "en"
          },
          "picture": {
            "type": "string",
            "example": "https://..."
          },
          "provider": {
            "type": "string",
            "example": "None"
          },
          "sub": {
            "type": "string",
            "example": "None"
          }
        }
      },
      "cwe": {
        "type": "object",
        "properties": {
          "CweID": {
            "type": "integer",
            "example": 6
          },
          "Name": {
            "type": "string",
            "example": "J2EE Misconfiguration: Insufficient Session-ID Length"
          },
          "Weakness_Abstraction": {
            "type": "string",
            "example": "Variant"
          },
          "Status": {
            "type": "string",
            "example": "Incomplete"
          },
          "Description_Summary": {
            "type": "string",
            "example": "The J2EE application is configured to use an insufficient session ID length."
          }
        }
      },
      "issue": {
        "type": "object",
        "properties": {
          "PrjName": {
            "type": "string",
            "example": "20211201-MyApp-QA"
          },
          "TID": {
            "type": "string",
            "example": "API-T10-01"
          },
          "TIssueName": {
            "type": "string",
            "example": "Broken Object Level Authorization"
          },
          "CweId": {
            "type": "integer",
            "example": 284
          },
          "IURIs": {
            "type": "string",
            "example": "https://app1.qaenv.local"
          },
          "IEvidence": {
            "type": "string",
            "example": "=== REQUEST ===\n\n=== RESPONSE ===\n"
          },
          "IScreenshots": {
            "type": "string",
            "example": ""
          },
          "IPriority": {
            "type": "integer",
            "example": 6
          },
          "IPriorityText": {
            "type": "string",
            "example": "TODO"
          },
          "INotes": {
            "type": "string",
            "example": "The application..."
          }
        }
      },
      "project": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "20211201-MyApp-QA"
          },
          "notes": {
            "type": "string",
            "example": "Test everything."
          },
          "software": {
            "type": "string",
            "example": "cpe:2.3:a:nodejs:node.js:16.2.1:"
          },
          "TTestNameKeyword": {
            "type": "string",
            "example": "2019"
          },
          "TCweIDSearch": {
            "type": "integer",
            "example": 284
          },
          "scope": {
            "type": "string",
            "example": "API"
          },
          "scopeQry": {
            "type": "string",
            "example": "API"
          },
          "PciTests": {
            "type": "boolean",
            "example": false
          },
          "Top10Tests": {
            "type": "boolean",
            "example": true
          },
          "Top25Tests": {
            "type": "boolean",
            "example": false
          },
          "StdTests": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "testKB": {
        "type": "object",
        "properties": {
          "TID": {
            "type": "string",
            "example": "API-T10-01"
          },
          "TTestName": {
            "type": "string",
            "example": "API1:2019 - Broken Object Level Authorization (BOLA,IDOR)"
          },
          "TSource": {
            "type": "string",
            "example": "OWASP-API-T10"
          },
          "TTesterSupport": {
            "type": "string",
            "example": "APIs tend to expose endpoints ..."
          },
          "TTRef": {
            "type": "string",
            "example": "https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa1-broken-object-level-authorization.md"
          },
          "TCweID": {
            "type": "integer",
            "example": 284
          },
          "TIssueName": {
            "type": "string",
            "example": "Broken Object Level Authorization"
          },
          "TIssueBackground": {
            "type": "string",
            "example": "Object level authorization is ..."
          },
          "TRemediationBackground": {
            "type": "string",
            "example": "How to Prevent?\n..."
          },
          "TSeverity": {
            "type": "integer",
            "example": 3
          },
          "TPCI": {
            "type": "boolean",
            "example": false
          },
          "TTop10": {
            "type": "boolean",
            "example": true
          },
          "TTop25": {
            "type": "boolean",
            "example": false
          },
          "TStdTest": {
            "type": "boolean",
            "example": false
          },
          "TRef1": {
            "type": "string",
            "example": "https://cwe.mitre.org/data/definitions/285.html"
          },
          "TRef2": {
            "type": "string",
            "example": "https://cwe.mitre.org/data/definitions/639.html"
          }
        }
      },
      "cspReport": {
        "type": "object",
        "properties": {
          "csp-report": {
            "$ref": "#/components/schemas/cspReportDetails"
          },
          "timestamp": {
            "type": "string",
            "example": "2021-12-06T19:50:18.929Z"
          }
        }
      },
      "cspReportDetails": {
        "type": "object",
        "properties": {
          "blocked-uri": {
            "type": "string",
            "example": "https://unexpected.domain.com/profile.jpg"
          },
          "column-number": {
            "type": "integer",
            "example": 50
          },
          "document-uri": {
            "type": "string",
            "example": "https://myapp.com/mypage"
          },
          "line-number": {
            "type": "integer",
            "example": 10
          },
          "original-policy": {
            "type": "string",
            "example": "default-src 'self' data:; img-src 'self' data: https://good1.domain.com https://good2.domain.com; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; font-src 'self'; frame-src 'none'; object-src 'none'; media-src 'self'; connect-src 'self'; sandbox allow-same-origin allow-forms allow-scripts; report-uri https://myapp.com/report-violation"
          },
          "referrer": {
            "type": "string",
            "example": "https://myapp.com/home"
          },
          "source-file": {
            "type": "string",
            "example": "https://myapp.com/js/myscript.js"
          },
          "violated-directive": {
            "type": "string",
            "example": "img-src"
          }
        }
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      },
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    },
    {
      "cookieAuth": []
    }
  ],
  "paths": {
    "/api/ping": {
      "get": {
        "description": "API test endpoint",
        "responses": {
          "200": {
            "description": "ping response message"
          }
        },
        "summary": "Check service",
        "tags": [
          "Monitoring and Admin"
        ]
      }
    },
    "/report-violation": {
      "post": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cspReport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Endpoint for browsers to report Content Security Policy (CSP) violations",
        "tags": [
          "Monitoring and Admin"
        ]
      }
    },
    "/api/db/backup": {
      "post": {
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server failure"
          }
        },
        "summary": "Backup DB",
        "tags": [
          "Monitoring and Admin"
        ]
      }
    },
    "/api/account": {
      "get": {
        "description": "Get user account information",
        "operationId": "get-api-account",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get user account info",
        "tags": [
          "Account"
        ]
      }
    },
    "/api/project": {
      "get": {
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Get all projects",
        "tags": [
          "Project"
        ]
      },
      "post": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Create project",
        "tags": [
          "Project"
        ]
      }
    },
    "/api/project/{name}": {
      "get": {
        "description": "Get data for a project",
        "operationId": "get-project",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Project name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Get project data",
        "tags": [
          "Project"
        ]
      },
      "put": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Project name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Update project",
        "tags": [
          "Project"
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Project name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Delete project.",
        "tags": [
          "Project"
        ]
      }
    },
    "/api/testkb/{TID}": {
      "get": {
        "parameters": [
          {
            "name": "TID",
            "in": "path",
            "description": "Test ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "API-T10-01"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/testKB"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Get data for a specific Test ID.",
        "tags": [
          "TestKB"
        ]
      },
      "put": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/testKB"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "TID",
            "in": "path",
            "description": "Test ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "API-T10-01"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Update an existing test",
        "tags": [
          "TestKB"
        ]
      }
    },
    "/api/testkb": {
      "post": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/testKB"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Create a new test",
        "tags": [
          "TestKB"
        ]
      }
    },
    "/api/issue": {
      "get": {
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Get all issues for all projects",
        "tags": [
          "Issue"
        ]
      }
    },
    "/api/issue/{PrjName}": {
      "get": {
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Get all issues for a specific project.",
        "tags": [
          "Issue"
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Delete all issues in a project.",
        "tags": [
          "Issue"
        ]
      }
    },
    "/api/issue/{PrjName}/{TID}": {
      "put": {
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/issue"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          },
          {
            "name": "TID",
            "in": "path",
            "description": "Test ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "API-T10-01"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Create/update an issue",
        "tags": [
          "Issue"
        ]
      },
      "delete": {
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          },
          {
            "name": "TID",
            "in": "path",
            "description": "Test ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "API-T10-01"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Delete an issue.",
        "tags": [
          "Issue"
        ]
      }
    },
    "/api/issue/{PrjName}/todos": {
      "post": {
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Create issue TODOs for a given project.",
        "tags": [
          "Issue"
        ]
      }
    },
    "/api/cwe": {
      "get": {
        "description": "Get all CWEs",
        "operationId": "get-api-cwe",
        "parameters": [],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cwe"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Get CWE list",
        "tags": [
          "CWE"
        ]
      }
    },
    "/api/cwe/{CweId}": {
      "get": {
        "description": "Get data for a CWE",
        "operationId": "get-api-cwe-285",
        "parameters": [
          {
            "name": "CweId",
            "in": "path",
            "description": "ID of CWE to return",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 6
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cwe"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Get data for a CWE.",
        "tags": [
          "CWE"
        ]
      }
    },
    "/api/{PrjName}/tests": {
      "get": {
        "description": "Get applicable tests for a project",
        "operationId": "get-project-tests",
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Get applicable tests for a project.",
        "tags": [
          "Project"
        ]
      }
    },
    "/export/csv/{PrjName}": {
      "get": {
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Export all issues for a specific project in CSV.",
        "tags": [
          "Reporting"
        ]
      }
    },
    "/export/json/{PrjName}": {
      "get": {
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {},
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Export all issues for a specific project in JSON.",
        "tags": [
          "Reporting"
        ]
      }
    },
    "/export/html/findings/{PrjName}": {
      "get": {
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Generate a Findings Report for a project in HTML.",
        "tags": [
          "Reporting"
        ]
      }
    },
    "/export/html/full/{PrjName}": {
      "get": {
        "parameters": [
          {
            "name": "PrjName",
            "in": "path",
            "description": "Project Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "20211201-MyApp-QA"
          }
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success (no data)"
          },
          "400": {
            "description": "Request failure (check inputs)"
          },
          "404": {
            "description": "Not found (DB error)"
          }
        },
        "summary": "Generate a Full Report for a project in HTML.",
        "tags": [
          "Reporting"
        ]
      }
    }
  },
  "tags": []
}